/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.21
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name */
#define CMDLINE_PARSER_PACKAGE "simulac"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *version_help; /**< @brief Print version and exit help description.  */
  int help_flag;	/**< @brief print out help message and exit (default=off).  */
  const char *help_help; /**< @brief print out help message and exit help description.  */
  int debug_arg;	/**< @brief set debugging level (0 = none, 1 = info, ... 5 = all).  */
  char * debug_orig;	/**< @brief set debugging level (0 = none, 1 = info, ... 5 = all) original value given at command line.  */
  const char *debug_help; /**< @brief set debugging level (0 = none, 1 = info, ... 5 = all) help description.  */
  char ** init_arg;	/**< @brief initial condition, name=val (int).  */
  char ** init_orig;	/**< @brief initial condition, name=val (int) original value given at command line.  */
  int init_min; /**< @brief initial condition, name=val (int)'s minimum occurreces */
  int init_max; /**< @brief initial condition, name=val (int)'s maximum occurreces */
  const char *init_help; /**< @brief initial condition, name=val (int) help description.  */
  char ** rate_arg;	/**< @brief rate parameter, kNN=val (float).  */
  char ** rate_orig;	/**< @brief rate parameter, kNN=val (float) original value given at command line.  */
  int rate_min; /**< @brief rate parameter, kNN=val (float)'s minimum occurreces */
  int rate_max; /**< @brief rate parameter, kNN=val (float)'s maximum occurreces */
  const char *rate_help; /**< @brief rate parameter, kNN=val (float) help description.  */
  float volume_arg;	/**< @brief initial cell volume, (0-1].  */
  char * volume_orig;	/**< @brief initial cell volume, (0-1] original value given at command line.  */
  const char *volume_help; /**< @brief initial cell volume, (0-1] help description.  */
  int scale_init_flag;	/**< @brief scale initial conditions to match volume (default=off).  */
  const char *scale_init_help; /**< @brief scale initial conditions to match volume help description.  */
  float growth_arg;	/**< @brief cell growth rate, (0-1].  */
  char * growth_orig;	/**< @brief cell growth rate, (0-1] original value given at command line.  */
  const char *growth_help; /**< @brief cell growth rate, (0-1] help description.  */
  int header_flag;	/**< @brief print header row in output file (default=on).  */
  const char *header_help; /**< @brief print header row in output file help description.  */
  int moi_arg;	/**< @brief multiplicity of infection.  */
  char * moi_orig;	/**< @brief multiplicity of infection original value given at command line.  */
  const char *moi_help; /**< @brief multiplicity of infection help description.  */
  int single_flag;	/**< @brief single cell mode; turn off cell division (default=off).  */
  const char *single_help; /**< @brief single cell mode; turn off cell division help description.  */
  int pops_flag;	/**< @brief output transcription initiations (default=off).  */
  const char *pops_help; /**< @brief output transcription initiations help description.  */
  char * matlab_setup_arg;	/**< @brief generate a MATLAB setup script.  */
  char * matlab_setup_orig;	/**< @brief generate a MATLAB setup script original value given at command line.  */
  const char *matlab_setup_help; /**< @brief generate a MATLAB setup script help description.  */
  char * python_setup_arg;	/**< @brief generate a MATLAB setup script.  */
  char * python_setup_orig;	/**< @brief generate a MATLAB setup script original value given at command line.  */
  const char *python_setup_help; /**< @brief generate a MATLAB setup script help description.  */
  char ** param_arg;	/**< @brief set parameter value.  */
  char ** param_orig;	/**< @brief set parameter value original value given at command line.  */
  int param_min; /**< @brief set parameter value's minimum occurreces */
  int param_max; /**< @brief set parameter value's maximum occurreces */
  const char *param_help; /**< @brief set parameter value help description.  */
  char * config_file_arg;	/**< @brief configuration file with additional options.  */
  char * config_file_orig;	/**< @brief configuration file with additional options original value given at command line.  */
  const char *config_file_help; /**< @brief configuration file with additional options help description.  */
  char * system_file_arg;	/**< @brief System description (outline file).  */
  char * system_file_orig;	/**< @brief System description (outline file) original value given at command line.  */
  const char *system_file_help; /**< @brief System description (outline file) help description.  */
  char * config_path_arg;	/**< @brief Path to search for configuration files (default='.').  */
  char * config_path_orig;	/**< @brief Path to search for configuration files original value given at command line.  */
  const char *config_path_help; /**< @brief Path to search for configuration files help description.  */
  double maximum_time_arg;	/**< @brief Maximum time to run the simulation (default='100').  */
  char * maximum_time_orig;	/**< @brief Maximum time to run the simulation original value given at command line.  */
  const char *maximum_time_help; /**< @brief Maximum time to run the simulation help description.  */
  double print_time_arg;	/**< @brief Time interval to use for printing output state (default='1').  */
  char * print_time_orig;	/**< @brief Time interval to use for printing output state original value given at command line.  */
  const char *print_time_help; /**< @brief Time interval to use for printing output state help description.  */
  long seed_arg;	/**< @brief Seed for random number generator.  */
  char * seed_orig;	/**< @brief Seed for random number generator original value given at command line.  */
  const char *seed_help; /**< @brief Seed for random number generator help description.  */
  char * output_file_arg;	/**< @brief Output file name.  */
  char * output_file_orig;	/**< @brief Output file name original value given at command line.  */
  const char *output_file_help; /**< @brief Output file name help description.  */
  char * log_file_arg;	/**< @brief Log file name.  */
  char * log_file_orig;	/**< @brief Log file name original value given at command line.  */
  const char *log_file_help; /**< @brief Log file name help description.  */
  
  int version_given ;	/**< @brief Whether version was given.  */
  int help_given ;	/**< @brief Whether help was given.  */
  int debug_given ;	/**< @brief Whether debug was given.  */
  unsigned int init_given ;	/**< @brief Whether init was given.  */
  unsigned int rate_given ;	/**< @brief Whether rate was given.  */
  int volume_given ;	/**< @brief Whether volume was given.  */
  int scale_init_given ;	/**< @brief Whether scale-init was given.  */
  int growth_given ;	/**< @brief Whether growth was given.  */
  int header_given ;	/**< @brief Whether header was given.  */
  int moi_given ;	/**< @brief Whether moi was given.  */
  int single_given ;	/**< @brief Whether single was given.  */
  int pops_given ;	/**< @brief Whether pops was given.  */
  int matlab_setup_given ;	/**< @brief Whether matlab-setup was given.  */
  int python_setup_given ;	/**< @brief Whether python-setup was given.  */
  unsigned int param_given ;	/**< @brief Whether param was given.  */
  int config_file_given ;	/**< @brief Whether config-file was given.  */
  int system_file_given ;	/**< @brief Whether system-file was given.  */
  int config_path_given ;	/**< @brief Whether config-path was given.  */
  int maximum_time_given ;	/**< @brief Whether maximum-time was given.  */
  int print_time_given ;	/**< @brief Whether print-time was given.  */
  int seed_given ;	/**< @brief Whether seed was given.  */
  int output_file_given ;	/**< @brief Whether output-file was given.  */
  int log_file_given ;	/**< @brief Whether log-file was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 0) */
  int check_required; /**< @brief whether to check that all required options were provided (default 0) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to 0
 * @return the initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_init();

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_config_file() instead
 */
int cmdline_parser_configfile (char * const filename,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_config_file (char * const filename,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
